// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//////////////////////////////////////////
// Prisma Configuration
//////////////////////////////////////////
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//////////////////////////////////////////
// NextAuth Models
// We don't need to touch these often.
//////////////////////////////////////////

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Profile       Profile? // Our application specific user data
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//////////////////////////////////////////
// Application Models
//////////////////////////////////////////

// 1:1 relationship with User
// Profile containing any user generated data like:
// bio, location, taste-preferences, reviews, etc.
model Profile {
  id          String  @id @default(cuid())
  profileName String? @unique

  // relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  reviews Review[]
}

model Producer {
  id          Int    @id @default(autoincrement())
  name        String
  location    String @default("")
  website     String @default("")
  bannerImage String @default("")

  // relations
  strains Strain[]
}

model Strain {
  // values
  id          Int      @id @default(autoincrement())
  name        String
  batchDate   DateTime @default(now())
  productType String // flower or concentrate
  THC         Float    @default(0)

  // relations
  reviews    Review[]
  producer   Producer @relation(fields: [producerId], references: [id], onDelete: Cascade)
  producerId Int
}

model Review {
  // values
  id        Int      @id @default(autoincrement())
  rating    Float    @default(0)
  comment   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // relations
  strainId Int
  strain   Strain @relation(fields: [strainId], references: [id], onDelete: Cascade)

  profileId String
  Profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}
